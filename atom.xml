<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一轮明月照九洲</title>
  
  <subtitle>长将静趣观天地，自有幽怀契古今</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-01T08:58:15.970Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>我与我周旋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PTA基础题算法&amp;&amp;心得（7-1---7-12）</title>
    <link href="http://yoursite.com/2020/02/01/PTA%E5%9F%BA%E7%A1%80%E9%A2%98%E7%AE%97%E6%B3%95-%E5%BF%83%E5%BE%97/"/>
    <id>http://yoursite.com/2020/02/01/PTA基础题算法-心得/</id>
    <published>2020-02-01T08:44:00.000Z</published>
    <updated>2020-02-01T08:58:15.970Z</updated>
    
    <content type="html"><![CDATA[<p>#整型变量存储规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int foot=height/30.48;</span><br><span class="line">int inch=(height/30.48-foot)*12;</span><br></pre></td></tr></table></figure><p>对于C而言  整数除浮点数结果是浮点数 但存储在整型变量中会自动将浮点型化为整型，<br>          而其本质还是浮点数。</p><p>#求和  1/1+……..1/n  or  1/1-1/2+1/3……+1/n</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">int i;</span><br><span class="line">double sum=0.0;</span><br><span class="line">int sign=1; </span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">for(i=1;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"> sum+=sign*1.0/i;</span><br><span class="line"> sign=-sign;</span><br><span class="line">&#125; </span><br><span class="line">printf(&quot;f(%d)=%f\n&quot;,n,sum);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义变量sum 不给初值直接使用的话 sum的值是随机的；<br>f（%d）=f（%f），n，sum 解决第n 项求和表示；<br>一正一负的交替相加用sign=-sign，sign的初值为-1，乘以原式,也可将sign 设为double型 初值为1.0可替代循环体，sum+=sign/i；</p><p>#整数分解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line"> int x;</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> int t;</span><br><span class="line"> int mask=1;</span><br><span class="line"> t=x;</span><br><span class="line"> while(t&gt;9)&#123;</span><br><span class="line">      t/=10;</span><br><span class="line">      mask=mask*10;</span><br><span class="line"> &#125;</span><br><span class="line"> printf(&quot;%d\n&quot;,mask);</span><br><span class="line"> do&#123;</span><br><span class="line">  int d=x/mask;</span><br><span class="line">  printf(&quot;%d&quot;,d); </span><br><span class="line">  if(mask&gt;9)&#123;</span><br><span class="line">   printf(&quot; &quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  x%=mask;</span><br><span class="line">  mask/=10;</span><br><span class="line"> &#125;</span><br><span class="line"> while(mask&gt;0);</span><br><span class="line"> printf(&quot;\n&quot;);</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mask的值用x的位数确定，因为不能直接消耗x，用辅助变量t存储x，mask循环要少一次10的n-1次方，用t每除10然后，mask*10，直到t大于9；<br>x整除mask确定第一位，然后x再对mask取余求剩下位数，mask在/10；<br>中间空格用mask判断mask&gt;9,每循环一次输出一个空格；</p><p>#最大公约数 辗转相除法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line"> int a,b;</span><br><span class="line"> int t;</span><br><span class="line"> scanf(&quot;%d %d&quot;,&amp;a,&amp;b);</span><br><span class="line"> while(b!=0)</span><br><span class="line"> &#123;</span><br><span class="line">  t=a%b;</span><br><span class="line">  a=b;</span><br><span class="line">  b=t;</span><br><span class="line"> &#125;</span><br><span class="line"> printf(&quot;gcd=%d&quot;,a);</span><br><span class="line"> return 0;</span><br><span class="line">&#125; </span><br><span class="line">辗转相除法：如果b=0，a就是最大公约数；</span><br><span class="line">否则，计算a除以b的余数，让b=a，b=a的余数；</span><br><span class="line">回到第一步；</span><br><span class="line">#求符合条件的整数集</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">int a;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">int i,j,k;</span><br><span class="line">int ctn=0;</span><br><span class="line">for(i=a;i&lt;=a+3;i++)&#123;</span><br><span class="line">   for(j=a ;j&lt;=a+3;j++)</span><br><span class="line">        &#123;</span><br><span class="line">         for(k=a;k&lt;=a+3;k++)</span><br><span class="line">         if(i!=j &amp;&amp; i!=k &amp;&amp;j!=k)&#123;</span><br><span class="line">          ctn++;</span><br><span class="line">   printf(&quot;%d%d%d&quot;,i,j,k); </span><br><span class="line">   if(ctn==6)&#123;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    ctn=0;</span><br><span class="line">   &#125;</span><br><span class="line">   else printf(&quot; &quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式控制：用计数器ctn 记录不重复的数，每6个数换行用if（ctn==6）输出换行然后ctn归零，以此循环，用else 输出中间的空格；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#整型变量存储规则&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>union-find</title>
    <link href="http://yoursite.com/2019/08/11/union-find/"/>
    <id>http://yoursite.com/2019/08/11/union-find/</id>
    <published>2019-08-11T03:25:00.000Z</published>
    <updated>2019-08-11T03:44:45.371Z</updated>
    
    <content type="html"><![CDATA[<p>发展一个可用的算法的步骤：<br>把问题模型化<br>找到一个算法去解决它<br>足够快？适合内存？<br>如果不是，想想为什么<br>寻找一个方法去解决这个问题<br>重复直到一切都满意<br>动态连接（Dynamic connectivity）<br>我们假设“被连接”是一个相等的关系：<br>自反：p被p连接<br>对称：如果p被q连接，那么q也被p连接<br>传递：如果p被q连接，q被r连接，那么p被r连接<br>连接集合（Connected components）：每个对象被连接的所以元素</p><p>发现问题：检查两个对象是否都在同一个集合里面<br>连接命令：用连接替换两个对象集合</p><p>联合查找数据类型（Union-find data type）API<br>目标 设计有效的数据结构为联合查找<br>定义一个 UF类<br>对数据初始化<br>给数据添加连接<br>判断数据是否在同一集合内<br>找到p所在的集合<br>确定集合的数量</p><p>动态连接客户端（Dynamic-connectivity client）<br>从标准输入中读取n个对象<br>重复：</p><ul><li>从标准输入中读取整数对</li><li>如果他们未被连接请将他们连接<br>代码<pre><code>public static void main（string[] args）{ int N = StdIn.readInt(); UF uf = new UF(N); while （！stdIn.isEmpty（）） {   int p = stdIn.readInt();   int q = stdIn.readInt();   if (!uf.connected（p，q））   {     uf.union(p,q);     stdOut.prtinln(p+&quot; &quot;+q);   }  }}</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发展一个可用的算法的步骤：&lt;br&gt;把问题模型化&lt;br&gt;找到一个算法去解决它&lt;br&gt;足够快？适合内存？&lt;br&gt;如果不是，想想为什么&lt;br&gt;寻找一个方法去解决这个问题&lt;br&gt;重复直到一切都满意&lt;br&gt;动态连接（Dynamic connectivity）&lt;br&gt;我们假设“被连接”
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Algorithms, Part I | Coursera by Princeton University</title>
    <link href="http://yoursite.com/2019/08/09/%E2%80%9Ctest-post/"/>
    <id>http://yoursite.com/2019/08/09/“test-post/</id>
    <published>2019-08-09T10:28:07.000Z</published>
    <updated>2019-08-10T01:45:07.061Z</updated>
    
    <content type="html"><![CDATA[<p>ALGORITHMS, PARTS I AND II 概述<br>Algorithm: method for solving a problem<br>Data structure: method to store information<br>       topic              data structure<br>  data types     stack,queue ,bag,union-find,priority queue<br>storting    quicksort,mergesort,heapsort<br>mergesort<br>BST,red-black BST,hash table<br>graphs    BFS,DFS,Prim,Kruskal,dijkstra<br>strings    radix sorts,tries,KMP,regexps,data compression<br>advanced    B-tree,suffix array,maxflow</p><p>why we study algorithms?<br>Their impacts is board and far-reaching.<br>Old roots,new opportunities.<br>To solve problems that could not otherwise be addressed.<br>For intellectual stimulation.<br>To become a proficient programmer.<br>They may unlock the secrets of life and of the universe.<br>For fun and profit.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ALGORITHMS, PARTS I AND II 概述&lt;br&gt;Algorithm: method for solving a problem&lt;br&gt;Data structure: method to store information&lt;br&gt;       topic  
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/07/05/hello-world/"/>
    <id>http://yoursite.com/2019/07/05/hello-world/</id>
    <published>2019-07-05T04:45:49.322Z</published>
    <updated>2019-07-05T04:45:49.323Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
